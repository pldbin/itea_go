Chat server

Overview
Develop a chat server that will allow clients to connect using a JWT token. The server will generate the token when the client requests it. The token will have the permissions to create, edit, and delete rooms, as well as edit and remove messages from other participants and themselves. Clients can send requests to the server with commands to create rooms, remove rooms, edit rooms, edit and remove messages from participants and themselves, and receive all messages from a room. The server should validate the token and check if the client has permission to execute the command. The client should handle server disconnect and request a list of all participants. The server should store all information about rooms and their participants. The token should expire, and if a room is closed by one participant, all clients should disconnect from that room.
Requirements
The chat server should have the following requirements:
JWT Token Generation
The server should be able to generate a JWT token when a client requests it. The token should have the following grants:
Create, edit, and delete rooms
Edit and remove messages from other participants and themselves
The token should have an expiration.
Communication Protocol and Format
You should choose a communication protocol and format for the chat server. Some options include gRPC, RESTApi, WebSockets, or other communication protocols. The format of the requests and responses should be specified, including the required fields and their types.
Client Commands
The server should be able to handle the following commands from clients:
Create a room
Remove a room
Edit a room
Edit and remove messages from participants and themselves
Receive all messages from a room
Clients should send requests with the JWT token.
Client Validation
The server should validate the JWT token and check if the client has permission to execute the command. If the token is invalid or the client does not have permission, the server should reject the request.
Room Management
The server should store information about rooms and their participants. If a room is closed by one participant, all clients should disconnect from that room.
Client Disconnection
Clients should be able to handle server disconnects gracefully.
Participant List
Clients should be able to request a list of all participants in a room.
Technology Stack
The chat server should be developed using the following technologies:
Golang
JSON Web Tokens (JWT)
The communication protocol and format of your choice
Deliverables
The deliverables for this project are:
Source code for the chat server
Documentation on how to use the server, including how to generate a JWT token and how to send requests with the token
Documentation on the technology stack and any libraries used
Unit tests for the server.
